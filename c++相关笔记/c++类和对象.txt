类和对象



一、初始化列表



1、狭义初始化

在定义变量的时候直接进行初始化的这种行为叫做狭义初始化：

int a = 3;



2、广义初始化

第一次给变量赋值就叫做初始化的情况叫广义初始化

int a;

...//跟a无关的代码

a = 3



初始化列表相当于狭义初始化，而构造函数内部相当于广义初始化



所以初始化列表可以解决一些只能用狭义初始化进行初始化的变量，例如：

const变量

引用

没有无参构造的类的对象



explicit：阻止单参构造的不规范调用



单参数的构造函数，可以用=直接调用，例如：

假设CT类中有一个单参数的构造函数，参数类型为int或int相关类型，那么，“CT a = 3;” 这种写法就是被允许的，但是这种写法十分别扭，看上去好像直接把3赋给了a，为了避免这种写法，可以在构造函数加explicit，使得这样的写法变得无效。





二、赋值运算符重载



operator=



运算符重载：

将运算符看成函数，把他的几目当成参数，通过参数的类型识别出对应的操作方法，相当于函数重载。

运算符重载有指定的规则，规则根据运算符来制定。



类会自动提供一个赋值运算符的重载(4)，执行的是浅拷贝，跟拷贝构造相同



三、const成员函数



const加在成员函数的末尾，代表这个函数中的this是const修饰的

如果一个对象是const对象，那么它不能调用非const的成员函数









四、取地址运算符重载



类会自动提供两个取地址运算符重载，一个是针对普通对象的(5)，一个是针对const对象的(6)





五、静态成员



静态成员跟类走不跟对象走，类在他在，而一般成员是对象在他才在。所以静态成员可以通过类名直接调用，而普通成员必须通过对象调用。



静态成员也有private，public，protected之分



1、静态成员变量



1、所有对象共享，无论谁改了，所有的一起改

2、存储在全局区，不占用类的空间，所以取sizeof的时候不算在内

3、赋初值只能在类外，赋值时不加static，用“类型 类名::变量名 = n” 直接赋值



2、静态成员函数



只能直接访问静态成员变量，无法访问其他的普通成员，因为他没有this指针

1、友元



友元就是让一个外部函数或者外部类能访问我的私有成员。



友元打破了原有的权限制度，所以十分危险，不建议使用



2、内部类



在另一个类内声明的类



它属于外部类域中的一员，实例化对象需要使用域操作运算符(::)，同时它有权限的限制。

（private的类声明不能直接在外面声明对象）



外部类是内部类的友元，但是内部类不是外部类的友元

